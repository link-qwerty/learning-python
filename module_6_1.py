# Defines
from random import randint

class Animal:
    """
    Класс-прародитель для царства животных

    Содержит атрибуты и методы, общие для всего животного мира

    Атрибуты класса
    _______________
    alive:bool - Подопытный жив или мертв

    fed:bool - Подопытный сыт или же голоден

    name:str - Имя в карточке подопытного (написано неразборчивым врачебным почерком)

    quantum:bool - Указание на то, что подопытный может внезапно оказаться ни жив, ни мертв

    Методы класса
    _______________
    eat(food) - Съесть что-нибудь

    openbox() - Открыть коробку и посмотреть что стало с животным
    """

    alive = True
    fed = False
    quantum = False
    name = str()

    def eat(self, food):
        """
        Съесть еду

        Метод суперкласса. Принимает на вход еду и пытается ей насытиться. Потом, для того чтобы проверить
        самочувствие животного, открывает коробку

        :param food: Еда
        """

        if food.edible:
            self.fed = True
            print(f'{self.name} съел {food.name}')
        else:
            self.alive = False
            print(f'{self.name} не стал есть {food.name}')
        self.openbox()

    def openbox(self):
        """
        Открыть коробку и проверить что произошло с животным. Метод-шутка

        Метод суперкласса. Открывает коробку и проверяет что случилось с животным. Если животное квантовое, то
        дополнительно проверяется состояние животного, находящегося в суперпозиции в момент наблюдения.
        За разъяснениями прошу обращаться к Эрвину Шрёдингеру. Сама механика реализована простой проверкой на четность
        случайного целого числа
        """

        if self.quantum:
            print(f'Животное {self.name} {"живо" if (randint(1, 10) % 2 == 0) else "мертво"} '
                  f'и оно {"сытое" if self.fed else "голодное"}')
        else:
            print(f'Животное {self.name} {"живо" if self.alive else "мертво"} '
                  f'и оно {"сытое" if self.fed else "голодное"}')

class Plant:
    """
    Класс-прародитель для царства растений

    Содержит атрибуты, общие для всех растений

    Атрибуты класса
    _______________
    edible:bool - Съедобно ли это растение

    name:str - Название растения
    """

    edible = True
    name = str()

class Mammal(Animal):
    """
    Класс млекопитающих

    Объекты этого класса являются млекопитающими

    Методы класса
    _______________
    init(self) - Инициализация животного

    eat(food: Plant) - Скормить животному растение
    """

    def __init__(self, name: str, quantum: bool = False):
        """
        Конструктор: инициализация

        Принимает в качестве входных аргументов имя животного и квантовый признак
        :param name: Имя животного
        :param quantum: Квантовый признак
        """

        self.name = name
        self.quantum = quantum
        print(f'Млекопитающее животное {name} добавлено в коробку и оно{" " if quantum else " не "}'
              f'обладает квантовым признаком')

    def eat(self, food: Plant):
        """
        Съесть еду

        Метод-заглушка. Принимает на вход объект-растение и передает управление в метод суперкласса
        :param food: Еда
        """

        super().eat(food)

class Predator(Animal):
    """
    Класс хищников

    Объекты этого класса являются хищниками

    Методы класса
    _______________
    init(self) - Инициализация животного

    eat(food: Plant) - Скормить животному растение
    """

    def __init__(self, name: str, quantum: bool = False):
        """
        Конструктор: инициализация

        Принимает в качестве входных аргументов имя животного и квантовый признак
        :param name: Имя животного
        :param quantum: Квантовый признак
        """

        self.name = name
        self.quantum = quantum
        print(f'Хищное животное {name} добавлено в коробку и оно{" " if quantum else " не "}'
              f'обладает квантовым признаком')

    def eat(self, food: Plant):
        """
        Съесть еду

        Метод-заглушка. Принимает на вход объект-растение и передает управление в метод суперкласса
        :param food: Еда
        """
        super().eat(food)

class Flower(Plant):
    """
    Класс объектов цветов

    Объекты этого класса несъедобны

    Методы класса
    _______________
    init(name) - Инициализация растения
    """

    def __init__(self, name: str):
        """
        Конструктор: инициализация

        Принимает в качестве входного аргумента имя растения
        :param name: Имя растения
        """

        self.name = name
        self.edible = False

class Fruit(Plant):
    """
    Класс объектов фруктов

    Объекты этого класса съедобны

    Методы класса
    _______________
    init(name) - Инициализация растения
    """

    def __init__(self, name: str):
        """
        Конструктор: инициализация

        Принимает в качестве входного аргумента имя растения
        :param name: Имя растения
        """

        self.name = name
        self.edible = True

# Code
a1 = Mammal("Тюлень")
a2 = Predator("Кот", True)
p1 = Flower("Одуванчик")
p2 = Fruit("Яблоко")
a1.eat(p1)
a2.eat(p2)